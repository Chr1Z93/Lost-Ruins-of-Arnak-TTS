local cardIdIndex = {}
local expansionIndex = {}
local typeIndex = {}

local indexingDone = false

function onLoad()
  self.addContextMenuItem("Rebuild Index", startIndexBuild)
  math.randomseed(os.time())
  Wait.frames(startIndexBuild, 30)
end

function clearIndexes()
  indexingDone = false
  cardIdIndex = {}
  expansionIndex = {}
  typeIndex = {}
end

-- Clears the bag indexes and starts the coroutine to rebuild the indexes
function startIndexBuild()
  clearIndexes()
  startLuaCoroutine(self, "buildIndex")
end

function onObjectLeaveContainer(container, _)
  if container == self then
    broadcastToAll("Removing cards from the All Player Cards bag may break some functions.", "Red")
  end
end

-- Create the card indexes by iterating all cards in the bag, parsing their metadata
-- and creating the keyed lookup tables for the cards. This is a coroutine which will
-- spread the workload by processing 20 cards before yielding.
function buildIndex()
  local cardCount = 0
  indexingDone = false

  for _, cardData in ipairs(self.getData().ContainedObjects) do
    addCardToIndex(cardData)
    cardCount = cardCount + 1
    if cardCount > 19 then
      cardCount = 0
      coroutine.yield(0)
    end
  end

  -- sort tables by ID
  for _, indexTable in pairs(expansionIndex) do
    table.sort(indexTable)
  end

  for _, indexTable in pairs(typeIndex) do
    table.sort(indexTable)
  end

  indexingDone = true

  --outputMetrics()
  return 1
end

function outputMetrics()
  logExpansionCount("Base Game")
  logExpansionCount("Expedition Leaders")
  logExpansionCount("Missing Expedition")
  logExpansionCount("Promo 1")
end

function logExpansionCount(name)
  log(name .. ": " .. #expansionIndex[name])
end

-- Adds a card to any indexes it should be a part of, based on its metadata
---@param cardData table TTS object data for the card
function addCardToIndex(cardData)
  local cardMetadata = JSON.decode(cardData.GMNotes)

  -- if metadata was not valid JSON or empty, don't add the card
  if not cardMetadata == nil then
    log("Error parsing " .. cardData.Nickname)
    return
  end

  -- add to main index
  cardIdIndex[cardMetadata.id] = { data = cardData, metadata = cardMetadata }

  -- add to expansion index
  local expansion = cardMetadata.expansion
  if not expansionIndex[expansion] then
    expansionIndex[expansion] = {}
  end
  table.insert(expansionIndex[expansion], cardMetadata.id)

  -- add to type index
  local type = cardMetadata.type
  if not typeIndex[type] then
    typeIndex[type] = {}
  end
  table.insert(typeIndex[type], cardMetadata.id)
end

---@return boolean: If true, the bag is currently not indexing and ready to be accessed
function isIndexReady()
  if not indexingDone then
    broadcastToAll("Still loading player cards, please try again in a few seconds", { 0.9, 0.2, 0.2 })
  end
  return indexingDone
end

-- Returns a specific card from the bag, based on ID
---@param params table ID of the card to retrieve
---@return table: If the indexes are still being constructed, returns an empty table.
--  Otherwise, a single table with the following fields
--    data: TTS object data, suitable for spawning the card
--    metadata: Table of parsed metadata
function getCardById(params)
  if not isIndexReady() then return {} end
  return cardIdIndex[params.id]
end

-- Returns a list of cards from the bag matching an expansion / type
---@param params table Matching information
--    expansion: string
--    type: string
---@return table: If the indexes are still being constructed, returns an empty table.
--  Otherwise, a list of tables, each with the following fields
--    data: TTS object data, suitable for spawning the card
--    metadata: Table of parsed metadata
function getCardsByExpansionAndType(params)
  if not isIndexReady() then return {} end

  if not params.expansion and not params.type then
    return {}
  elseif params.expansion and not params.type then
    return expansionIndex[params.expansion]
  elseif params.type and not params.expansion then
    return typeIndex[params.type]
  else
    -- go through index and filter for matches
    local result = {}
    for id, t in pairs(cardIdIndex) do
      if t.metadata.expansion == params.expansion and t.metadata.type == type then
        table.insert(result, id)
      end
    end
    return result
  end
end

-- Spawn a specific list of cards.
---@param params table Contains the arguments below:
--   cardList table A list of card IDs
--   pos? table Position where the cards should be spawned (global)
--   rot? table Rotation for the orientation of the spawned cards (global)
--   callback? function callback to be called after the card/deck spawns.
function spawnCardList(params)
  local cardList = params.cardList
  local pos = params.pos or Vector(0, 3, 46.2)
  local rot = params.rot or Vector(0, 180, 180)
  local callback = params.callback

  -- if missing information, then abort
  if not cardList then return end

  -- get valid IDs from card list
  local spawnList = {}

  for _, id in ipairs(cardList) do
    if cardIdIndex[id] then
      table.insert(spawnList, cardIdIndex[id])
    end
  end

  -- if no valid card IDs were provided
  if #spawnList == 0 then return end

  -- Spawn a single card directly
  if #spawnList == 1 then
    spawnObjectData({
      data = spawnList[1].data,
      position = pos,
      rotation = rot,
      callback_function = callback
    })
    return
  end

  -- For multiple cards, construct a deck and spawn that
  local deck = {}
  deck.Name = "Deck"
  deck.ContainedObjects = {}
  deck.DeckIDs = {}
  deck.CustomDeck = {}

  -- Decks won't inherently scale to the cards in them, use the first card to set the size
  deck.Transform = {
    scaleX = spawnList[1].data.Transform.scaleX,
    scaleY = 1,
    scaleZ = spawnList[1].data.Transform.scaleZ
  }

  for _, spawnCard in ipairs(spawnList) do
    addCardToDeck(deck, spawnCard.data)
  end

  spawnObjectData({
    data = deck,
    position = pos,
    rotation = rot,
    callback_function = callback
  })
end

-- Inserts a card into the given deck.  This does three things:
--   1. Add the card's data to ContainedObjects.
--   2. Add the card's ID (the TTS CardID) to the deck's ID list.
--   3. Extract the card's CustomDeck table and add it to the deck.
---@param deck table TTS deck data structure to add to
---@param cardData table Data for the card to be inserted
function addCardToDeck(deck, cardData)
  for customDeckId, customDeckData in pairs(cardData.CustomDeck) do
    if deck.CustomDeck[customDeckId] == nil then
      -- CustomDeck not added to deck yet, add it
      deck.CustomDeck[customDeckId] = customDeckData
    elseif deck.CustomDeck[customDeckId].FaceURL == customDeckData.FaceURL then
      -- CustomDeck for this card matches the current one for the deck, do nothing
    else
      -- CustomDeck data conflict
      local newDeckId = nil
      for deckId, customDeck in pairs(deck.CustomDeck) do
        if customDeckData.FaceURL == customDeck.FaceURL then
          newDeckId = deckId
        end
      end
      if newDeckId == nil then
        -- No non-conflicting custom deck for this card, add a new one
        newDeckId = findNextAvailableId(deck.CustomDeck, "1000")
        deck.CustomDeck[newDeckId] = customDeckData
      end
      -- Update the card with the new CustomDeck info
      cardData.CardID = newDeckId..string.sub(cardData.CardID, 5)
      cardData.CustomDeck[customDeckId] = nil
      cardData.CustomDeck[newDeckId] = customDeckData
      break
    end
  end
  table.insert(deck.ContainedObjects, cardData)
  table.insert(deck.DeckIDs, cardData.CardID)
end

-- Returns the first ID which does not exist in the given table, starting at startId and increasing
---@param objectTable table keyed by strings which are numbers
---@param startId string possible ID.
---@return string id >= startId
function findNextAvailableId(objectTable, startId)
  local id = startId
  while objectTable[id] ~= nil do
    id = tostring(tonumber(id) + 1)
  end
  return id
end
